package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"os"
	<<TIMED,"slices">>
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}


type Arc struct {
	PLACE string `json:"place"`
	<<NOT COLORED,VALUE int    `json:"value"`>>
	<<COLORED,VALUE map[string]int `json:"value"`>>
	<<NOT COLORED AND INHIBITED,INHIBITOR int    `json:"inhibitor"`>>
	<<COLORED AND INHIBITED,INHIBITOR map[string]int    `json:"inhibitor"`>>
}
type Transition struct {
	INPUT  []Arc `json:"input"`
	OUTPUT []Arc `json:"output"`
	<<TIMED,MINTIME   int   `json:"minTime"`
	MAXTIME int   `json:"maxTime"`>>
}
type Marking struct {
	<<NOT COLORED,CONTENT map[string]int `json:"content"`>>
	<<COLORED,CONTENT map[string]map[string]int `json:"content"`>>
}
type Net struct {
	PLACES      []string     `json:"places"`
	TRANSITIONS map[string]Transition `json:"transitions"`
}
type JSONInput struct {
	NET Net     `json:"net"`
	M0  Marking `json:"m0"`
	<<COLORED,COLORS []string `json:"colors"`>>
}

<<COLORED,var colors = map[string]bool{}>>

func readNetFromJSONFile() (Net, Marking) {
	dataJson, err := os.ReadFile("net.json")
	check(err)
	var data JSONInput
	json.Unmarshal(dataJson, &data)
	var net Net
	var m0 Marking
	net = data.NET
	m0 = data.M0

	<<COLORED,colors_temp := data.COLORS
	for _, color := range colors_temp {
		colors[color] = true
	}>>

	for _, place := range net.PLACES {
		_, ok := m0.CONTENT[place]
		if !ok {
			<<NOT COLORED,m0.CONTENT[place] = 0>>
			<<COLORED,m0.CONTENT[place] = map[string]int{}>>
		}
		<<COLORED,for color, _ := range colors {
			_, ok := m0.CONTENT[place][color]
			if !ok {
				m0.CONTENT[place][color] = 0
			}
		}>>
	}

	<<TIMED,for t, _ := range net.TRANSITIONS {
		if net.TRANSITIONS[t].MINTIME < 1 {
			temp := net.TRANSITIONS[t]
			temp.MINTIME = 1
			net.TRANSITIONS[t] = temp
		}
		if net.TRANSITIONS[t].MAXTIME < 1 {
			temp := net.TRANSITIONS[t]
			temp.MAXTIME = 1
			net.TRANSITIONS[t] = temp
		}
	}>>

	return net, m0
}

<<NOT COLORED and INHIBITED, func compareArcExit(marking Marking, arc Arc) bool {
	if arc.INHIBITOR == 0 {
		return true
	}
	return arc.INHIBITOR >= marking.CONTENT[arc.PLACE]+arc.VALUE
}>>

<<COLORED and INHIBITED, func compareArcExit(marking Marking, arc Arc) bool {
	ok := true
	for color, _ := range colors {
		_, verify := arc.INHIBITOR[color]
		if !verify {
			continue
		}
		if verify && arc.INHIBITOR[color] < marking.CONTENT[arc.PLACE][color]+arc.VALUE[color] {
			ok = false
			break
		}
	}
	return ok
}>>

func compareArc(marking Marking, arc Arc) bool {
	<<NOT COLORED and NOT INHIBITED,return (marking.CONTENT[arc.PLACE] < arc.VALUE)>>
	<<NOT COLORED AND INHIBITED,cond1 := (marking.CONTENT[arc.PLACE] >= arc.VALUE)
	cond2 := (arc.INHIBITOR >= marking.CONTENT[arc.PLACE]) || arc.INHIBITOR == 0
	return cond1 && cond2>>
	<<COLORED AND INHIBITED,ok := true
	for color, _ := range colors {
		_, verify1 := arc.VALUE[color]
		_, verify2 := arc.INHIBITOR[color]
		if !verify1 {
			continue
		}
		if marking.CONTENT[arc.PLACE][color] < arc.VALUE[color] {
			ok = false
			break
		}
		if verify2 && (arc.INHIBITOR[color] < marking.CONTENT[arc.PLACE][color]) {
			ok = false
			break
		}
	}
	return ok>>
	<<COLORED AND NOT INHIBITED,ok := true
	for color, _ := range colors {
		_, verify := arc.VALUE[color]
		if !verify {
			continue
		}
		if marking.CONTENT[arc.PLACE][color] < arc.VALUE[color] {
			ok = false
			break
		}
	}
	return ok>>
}

func getViableTransitions(net Net, marking Marking) []string {
	var result []string
	for transition := range net.TRANSITIONS {
		ok := true
		for _, arc := range net.TRANSITIONS[transition].INPUT {
			if !compareArc(marking, arc) {
				ok = false
				break
			}
		}
		<<INHIBITED,for _, arc := range net.TRANSITIONS[transition].OUTPUT {
			if !compareArcExit(marking, arc) {
				ok = false
				break
			}
		}>>
		if ok {
			result = append(result, transition)
		}
	}
	return result
}
func selectTransition(transitions []string) string {
	randomIndex := rand.Intn(len(transitions))
	return transitions[randomIndex]
}

func activateTransition(net Net, transitionName string, m Marking) Marking {
	newMarking := m
	transition := net.TRANSITIONS[transitionName]

	for _, arc := range transition.INPUT {
		<<NOT COLORED,newMarking.CONTENT[arc.PLACE] -= arc.VALUE>>
		<<COLORED,for color, _ := range colors {
			newMarking.CONTENT[arc.PLACE][color] -= arc.VALUE[color]
		}>>
	}
	<<NOT TIMED, for _, arc := range transition.OUTPUT {>>
		<<NOT COLORED and NOT TIMED,newMarking.CONTENT[arc.PLACE] += arc.VALUE>>
		<<COLORED and NOT TIMED, for color, _ := range colors {
			newMarking.CONTENT[arc.PLACE][color] += arc.VALUE[color]
		}>>
		
	<<NOT TIMED,}>>
	return newMarking
}

<<TIMED AND NOT COLORED,func endTransition(net Net, transitionName string, m Marking) Marking {
	newMarking := m
	transition := net.TRANSITIONS[transitionName]

	for _, arc := range transition.OUTPUT {
		newMarking.CONTENT[arc.PLACE] += arc.VALUE
	}
	return newMarking
}>>

<<TIMED AND COLORED,func endTransition(net Net, transitionName string, m Marking) Marking {
	newMarking := m
	transition := net.TRANSITIONS[transitionName]

	for _, arc := range transition.OUTPUT {
		for color, _ := range colors {
			newMarking.CONTENT[arc.PLACE][color] += arc.VALUE[color]
		}
	}
	return newMarking
}>>
func main() {
	var net Net
	var markings []Marking
	var current_marking Marking
	net, current_marking = readNetFromJSONFile()
	markings = append(markings, current_marking)
	fmt.Println(current_marking)
	var transitions []string


	<<TIMED,type tuple struct {
		transition string
		time       int
		id         int
	}
	startId := 0
	globaltime := 0              
	activeTransitions := []tuple{}>>

	transitions = getViableTransitions(net, markings[0])
	for len(transitions) != 0 <<TIMED,|| len(activeTransitions) != 0>>{
		<<NOT TIMED,transition := selectTransition(transitions)
		current_marking = activateTransition(net, transition, markings[len(markings)-1])
		markings = append(markings, current_marking)
		fmt.Println(markings[len(markings)-1])
		transitions = getViableTransitions(net, markings[len(markings)-1])>>

		<<TIMED,globaltime++
		fmt.Println("TIME: ", globaltime)
		if len(transitions) > 0 {
			transition := selectTransition(transitions)
			current_marking = activateTransition(net, transition, markings[len(markings)-1])
			markings = append(markings, current_marking)
			mini := net.TRANSITIONS[transition].MINTIME
			maxi := net.TRANSITIONS[transition].MAXTIME
			var transition_time int
			if mini == maxi {
				transition_time = mini
			} else {
				transition_time = rand.Intn(maxi-mini) + mini
			}
			fmt.Println("Started transition", transition, "with id:", startId,"with duration",transition_time)
			activeTransitions = append(activeTransitions, tuple{
				transition: transition,
				time:       transition_time,
				id:         startId,
			}) 
			startId++
		}

		deleted := 0
		copy_activeTransitions := activeTransitions
		for index, tuple := range copy_activeTransitions {
			if tuple.time <= 1 {
				activeTransitions = slices.Delete(activeTransitions, index-deleted, index-deleted+1)
				current_marking = endTransition(net, tuple.transition, markings[len(markings)-1])
				markings = append(markings, current_marking)
				fmt.Println("Ended transtition", tuple.transition, "with id:", tuple.id)
				deleted++
			} else {
				activeTransitions[index-deleted].time--
			}
		}
		fmt.Println(markings[len(markings)-1])
		transitions = getViableTransitions(net, markings[len(markings)-1])>>
	}
	fmt.Println("There are no more viable transitions")
}
